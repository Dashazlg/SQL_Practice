SQL Lesson 1: SELECT queries 101
1. Find the title of each film
SELECT title FROM movies;
2. Find the director of each film
SELECT director FROM movies;
3. Find the title and director of each film
SELECT title, director FROM movies;
4. Find the title and year of each film
SELECT title, year FROM movies;
5. Find all the information about each film
SELECT * FROM movies;

SQL Lesson 2: Queries with constraints (Pt. 1)
1. Find the movie with a row id of 6
SELECT * FROM movies WHERE id = 6;
2. Find the movies released in the years between 2000 and 2010
SELECT * FROM movies WHERE year BETWEEN 2000 AND 2010;
3. Find the movies not released in the years between 2000 and 2010
SELECT * FROM movies WHERE year NOT BETWEEN 2000 AND 2010;
4. Find the first 5 Pixar movies and their release year
SELECT title, year FROM movies
where year limit 5;

SQL Lesson 3: Queries with constraints (Pt. 2)
1. Find all the Toy Story movies
SELECT title FROM movies
where title LIKE "%Toy Story%";
2. Find all the movies directed by John Lasseter
SELECT title FROM movies
where director = "John Lasseter";
3. Find all the movies (and director) not directed by John Lasseter
SELECT title FROM movies
where director != "John Lasseter";
4.Find all the WALL-* movies
SELECT * FROM movies
where title like "WALL-%";

SQL Lesson 4: Filtering and sorting Query results
1. List all directors of Pixar movies (alphabetically), without duplicates
SELECT DISTINCT director FROM movies
ORDER BY director ASC;
2. List the last four Pixar movies released (ordered from most recent to least)
SELECT * FROM movies
ORDER BY year DESC
LIMIT 4;
3. List the first five Pixar movies sorted alphabetically
SELECT * FROM movies
ORDER BY title ASC
LIMIT 5;
4. List the next five Pixar movies sorted alphabetically
SELECT * FROM movies
ORDER BY title ASC
LIMIT 5 OFFSET 5;

SQL Review: Simple SELECT Queries
1. List all the Canadian cities and their populations
SELECT city, population FROM north_american_cities
where country="Canada"
2. SELECT city, latitude FROM north_american_cities
WHERE country = "United States"
ORDER BY latitude DESC;
3. List all the cities west of Chicago, ordered from west to east
SELECT city FROM north_american_cities
WHERE longitude < -87.629798
ORDER BY longitude;
4. List the two largest cities in Mexico (by population)
SELECT city FROM north_american_cities
where country="Mexico"
order by population limit 2
5. List the third and fourth largest cities (by population) in the United States and their population
SELECT city, population FROM north_american_cities
where country="United States"
order by population DESC LIMIT 2 OFFSET 2;

SQL Lesson 6: Multi-table queries with JOINs
1. Find the domestic and international sales for each movie
SELECT title, domestic_sales, international_sales FROM movies
inner join boxoffice
on movies.id=boxoffice.movie_id
2. Show the sales numbers for each movie that did better internationally rather than domestically
SELECT * FROM movies
inner join boxoffice
on  movies.id=boxoffice.movie_id
where international_sales > domestic_sales;
3. List all the movies by their ratings in descending order
SELECT * FROM movies
inner join boxoffice
on  movies.id=boxoffice.movie_id
order by rating desc;

SQL Lesson 7: OUTER JOINs
1. Find the list of all buildings that have employees
SELECT distinct building_name FROM buildings
left join employees
on buildings.building_name=employees.building
where building is not null;
2.Find the list of all buildings and their capacity
SELECT distinct building_name, capacity FROM buildings
left join employees
on buildings.building_name=employees.building;
3.List all buildings and the distinct employee roles in each building (including empty buildings)
SELECT distinct building_name, role FROM buildings
left join employees
on buildings.building_name=employees.building;

SQL Lesson 8: A short note on NULLs
1. Find the name and role of all employees who have not been assigned to a building
SELECT name, role FROM employees
where building is null;
2. Find the names of the buildings that hold no employees 
SELECT distinct building_name FROM buildings
left join employees
on building_name=building
where role is null;

SQL Lesson 9: Queries with expressions
1. List all movies and their combined sales in millions of dollars
SELECT DISTINCT title,(domestic_sales + international_sales) / 1000000 AS sales
FROM movies
INNER JOIN boxoffice
ON movies.id = boxoffice.movie_id;
2. List all movies and their ratings in percent
SELECT DISTINCT title, rating * 10 AS percent
FROM movies
INNER JOIN boxoffice
ON movies.id = boxoffice.movie_id;

SQL Lesson 10: Queries with aggregates (Pt. 1)
1. Find the longest time that an employee has been at the studio 
SELECT name, max (years_employed) as max_year_employed FROM employees
2. For each role, find the average number of years employed by employees in that role 
SELECT role, avg (years_employed) from employees
group by role
3. Find the total number of employee years worked in each building 
SELECT building, SUM(years_employed) as Total_years_employed
FROM employees
GROUP BY building;

SQL Lesson 11: Queries with aggregates (Pt. 2)
1. Find the number of Artists in the studio (without a HAVING clause) 
SELECT role, COUNT(*) as Number_of_artists FROM employees
WHERE role = "Artist";
2. Find the number of Employees of each role in the studio
SELECT role, COUNT(*) as Number_of_artists FROM employees
group by role;
3. Find the total number of years employed by all Engineers
SELECT role, SUM(years_employed) FROM employees
GROUP BY role
HAVING role = "Engineer";

SQL Lesson 12: Order of execution of a Query
1. Find the number of movies each director has directed 
SELECT director, count (id) FROM movies
group by director;
2. Find the total domestic and international sales that can be attributed to each director
SELECT director, sum (domestic_sales + international_sales)as total_sales FROM movies
inner join boxoffice
on movies.id=boxoffice.movie_id
group by director;

SQL Lesson 13: Inserting rows
1. Add the studio's new production, Toy Story 4 to the list of movies (you can use any director)
INSERT INTO movies VALUES (4, "Toy Story 4", "John Lasseter", 2015, 90);
2. Toy Story 4 has been released to critical acclaim! It had a rating of 8.7, and made 340 million domestically and 270 million internationally. Add the record to the BoxOffice table.
INSERT INTO boxoffice VALUES (4, 8.7 , 340000000, 270000000);

SQL Lesson 14: Updating rows
1. The director for A Bug's Life is incorrect, it was actually directed by John Lasseter
UPDATE movies
set director="John Lasseter"
where id=2;
2. The year that Toy Story 2 was released is incorrect, it was actually released in 1999
UPDATE movies
set year = 1999
where title = "Toy Story 2"
3. Both the title and director for Toy Story 8 is incorrect! The title should be "Toy Story 3" and it was directed by Lee Unkrich
UPDATE movies
SET title = "Toy Story 3", director = "Lee Unkrich"
where title = "Toy Story 8";

SQL Lesson 15: Deleting rows
1. This database is getting too big, lets remove all movies that were released before 2005.
DELETE FROM movies
WHERE year < 2005;
2. Andrew Stanton has also left the studio, so please remove all movies directed by him.
DELETE FROM movies
WHERE director = "Andrew Stanton";

SQL Lesson 16: Creating tables
Create a new table named Database with the following columns:
– Name A string (text) describing the name of the database
– Version A number (floating point) of the latest version of this database
– Download_count An integer count of the number of times this database was downloaded
This table has no constraints

CREATE TABLE database (
    name TEXT,
    version FLOAT,
    download_count INTEGER
);

SQL Lesson 17: Altering tables
1. Add a column named Aspect_ratio with a FLOAT data type to store the aspect-ratio each movie was released in.
ALTER TABLE movies
ADD column Aspect_ratio
    float DEFAULT 2.2;
2. Add another column named Language with a TEXT data type to store the language that the movie was released in. Ensure that the default for this language is English.
ALTER TABLE movies
ADD column Language
TEXT DEFAULT "English";

SQL Lesson 18: Dropping tables
1.We've sadly reached the end of our lessons, lets clean up by removing the Movies table
DROP TABLE movies;
2. And drop the BoxOffice table as well
DROP TABLE boxoffice;

